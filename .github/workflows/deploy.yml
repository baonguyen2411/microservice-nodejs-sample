name: Deploy

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

env:
  REGISTRY: ghcr.io
  NODE_VERSION: '20'

jobs:
  # Check for changes in each service
  changes:
    runs-on: ubuntu-latest
    outputs:
      api-gateway: ${{ steps.changes.outputs.api-gateway }}
      auth-service: ${{ steps.changes.outputs.auth-service }}
      user-service: ${{ steps.changes.outputs.user-service }}
      tour-service: ${{ steps.changes.outputs.tour-service }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            api-gateway:
              - 'api-gateway/**'
            auth-service:
              - 'auth-service/**'
            user-service:
              - 'user-service/**'
            tour-service:
              - 'tour-service/**'

  # Build and push Docker images
  build-and-push:
    runs-on: ubuntu-latest
    needs: changes
    strategy:
      matrix:
        service: [api-gateway, auth-service, user-service, tour-service]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Generate deployment manifests
  generate-manifests:
    runs-on: ubuntu-latest
    needs: [changes, build-and-push]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate Docker Compose for production
        run: |
          # Create production docker-compose file
          cat > docker-compose.prod.yml << EOF
          version: '3.8'
          services:
            api-gateway:
              image: ${{ env.REGISTRY }}/${{ github.repository_owner }}/api-gateway:latest
              container_name: api-gateway
              restart: always
              ports:
                - "4000:4000"
              environment:
                - SECRET_KEY_ACCESS_TOKEN=\${SECRET_KEY_ACCESS_TOKEN}
                - AUTH_SERVICE_URI=\${AUTH_SERVICE_URI}
                - USER_SERVICE_URI=\${USER_SERVICE_URI}
                - TOUR_SERVICE_URI=\${TOUR_SERVICE_URI}
                - MONGO_URI=\${MONGO_URI}
              depends_on:
                - auth-service
                - user-service
                - tour-service

            auth-service:
              image: ${{ env.REGISTRY }}/${{ github.repository_owner }}/auth-service:latest
              container_name: auth-service
              restart: always
              ports:
                - "4001:4001"
              environment:
                - SECRET_KEY_ACCESS_TOKEN=\${SECRET_KEY_ACCESS_TOKEN}
                - MONGO_URI=\${MONGO_URI}

            user-service:
              image: ${{ env.REGISTRY }}/${{ github.repository_owner }}/user-service:latest
              container_name: user-service
              restart: always
              ports:
                - "4002:4002"
              environment:
                - SECRET_KEY_ACCESS_TOKEN=\${SECRET_KEY_ACCESS_TOKEN}
                - MONGO_URI=\${MONGO_URI}

            tour-service:
              image: ${{ env.REGISTRY }}/${{ github.repository_owner }}/tour-service:latest
              container_name: tour-service
              restart: always
              ports:
                - "4003:4003"
              environment:
                - SECRET_KEY_ACCESS_TOKEN=\${SECRET_KEY_ACCESS_TOKEN}
                - MONGO_URI=\${MONGO_URI}
          EOF

      - name: Upload production manifests
        uses: actions/upload-artifact@v3
        with:
          name: production-manifests
          path: |
            docker-compose.prod.yml
            
      - name: Create deployment summary
        run: |
          echo "## ðŸš€ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Container Images Published:" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ github.repository_owner }}/api-gateway:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ github.repository_owner }}/auth-service:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ github.repository_owner }}/user-service:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ github.repository_owner }}/tour-service:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Files:" >> $GITHUB_STEP_SUMMARY
          echo "- Production docker-compose file generated and uploaded as artifact" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Download the production manifests artifact" >> $GITHUB_STEP_SUMMARY
          echo "2. Set up environment variables on your production server" >> $GITHUB_STEP_SUMMARY
          echo "3. Run \`docker-compose -f docker-compose.prod.yml up -d\`" >> $GITHUB_STEP_SUMMARY