name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'

jobs:
  # Check for changes in each service
  changes:
    runs-on: ubuntu-latest
    outputs:
      api-gateway: ${{ steps.changes.outputs.api-gateway }}
      auth-service: ${{ steps.changes.outputs.auth-service }}
      user-service: ${{ steps.changes.outputs.user-service }}
      tour-service: ${{ steps.changes.outputs.tour-service }}
      docker-compose: ${{ steps.changes.outputs.docker-compose }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            api-gateway:
              - 'api-gateway/**'
            auth-service:
              - 'auth-service/**'
            user-service:
              - 'user-service/**'
            tour-service:
              - 'tour-service/**'
            docker-compose:
              - 'docker-compose.yml'

  # Lint and Build Jobs for each service
  lint-and-build:
    runs-on: ubuntu-latest
    needs: changes
    strategy:
      matrix:
        service: [api-gateway, auth-service, user-service, tour-service]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.service }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ matrix.service }}
        run: npm ci

      - name: Run ESLint
        working-directory: ${{ matrix.service }}
        run: npm run lint

      - name: Check Prettier formatting
        working-directory: ${{ matrix.service }}
        run: |
          npm run format
          if [[ $(git diff --name-only) ]]; then
            echo "Code is not properly formatted. Please run 'npm run format' and commit the changes."
            git diff
            exit 1
          fi

      - name: Build TypeScript
        working-directory: ${{ matrix.service }}
        run: npm run build

      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: ${{ matrix.service }}/dist
          key: ${{ runner.os }}-${{ matrix.service }}-build-${{ github.sha }}

  # Docker build and test
  docker-build:
    runs-on: ubuntu-latest
    needs: [changes, lint-and-build]
    strategy:
      matrix:
        service: [api-gateway, auth-service, user-service, tour-service]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service }}
          push: false
          tags: ${{ matrix.service }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Integration test with docker-compose
  integration-test:
    runs-on: ubuntu-latest
    needs: [changes, docker-build]
    if: needs.changes.outputs.docker-compose == 'true' || needs.changes.outputs.api-gateway == 'true' || needs.changes.outputs.auth-service == 'true' || needs.changes.outputs.user-service == 'true' || needs.changes.outputs.tour-service == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create environment file
        run: |
          cat > .env << EOF
          SECRET_KEY_ACCESS_TOKEN=test-secret-key-for-ci
          AUTH_SERVICE_URI=http://auth-service:4001
          USER_SERVICE_URI=http://user-service:4002
          TOUR_SERVICE_URI=http://tour-service:4003
          MONGO_URI=mongodb://mongo:27017/testdb
          EOF

      - name: Add MongoDB to docker-compose for testing
        run: |
          cat >> docker-compose.yml << EOF
          
            mongo:
              image: mongo:7
              container_name: mongo
              restart: always
              ports:
                - "27017:27017"
              environment:
                MONGO_INITDB_DATABASE: testdb
          EOF

      - name: Build and start services
        run: |
          docker-compose build
          docker-compose up -d

      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to start..."
          sleep 30
          
          # Check if all services are running
          docker-compose ps

      - name: Test API Gateway health
        run: |
          # Wait for API Gateway to be ready
          for i in {1..30}; do
            if curl -f http://localhost:4000/health 2>/dev/null; then
              echo "API Gateway is ready"
              break
            fi
            echo "Waiting for API Gateway... ($i/30)"
            sleep 2
          done

      - name: Run basic API tests
        run: |
          # Test that services are responding
          echo "Testing API Gateway..."
          curl -f http://localhost:4000/health || echo "API Gateway health check failed"
          
          echo "Testing Auth Service..."
          curl -f http://localhost:4001/health || echo "Auth Service health check failed"
          
          echo "Testing User Service..."
          curl -f http://localhost:4002/health || echo "User Service health check failed"
          
          echo "Testing Tour Service..."
          curl -f http://localhost:4003/health || echo "Tour Service health check failed"

      - name: Show logs on failure
        if: failure()
        run: |
          echo "=== Docker Compose Logs ==="
          docker-compose logs
          echo "=== Container Status ==="
          docker-compose ps

      - name: Cleanup
        if: always()
        run: docker-compose down -v

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: changes
    strategy:
      matrix:
        service: [api-gateway, auth-service, user-service, tour-service]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.service }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ matrix.service }}
        run: npm ci

      - name: Run npm audit
        working-directory: ${{ matrix.service }}
        run: npm audit --audit-level moderate

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: ${{ matrix.service }}
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

  # Notify on completion
  notify:
    runs-on: ubuntu-latest
    needs: [lint-and-build, docker-build, integration-test, security-scan]
    if: always()
    steps:
      - name: CI Summary
        run: |
          echo "CI Pipeline completed"
          echo "Lint and Build: ${{ needs.lint-and-build.result }}"
          echo "Docker Build: ${{ needs.docker-build.result }}"
          echo "Integration Test: ${{ needs.integration-test.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"